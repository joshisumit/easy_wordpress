#!/bin/bash
##################################   Easy Wordpress ##############################
###
#Author: Sumit Joshi
#Description: This shell script rapidly creates wordpress hosting environment on Ubuntu 12.04
#Date: May 20 2015
#
#PreRequisites
#
#
#
#

function install_nginx
{
	#echo "This function will install nginx"
	#sudo apt-get update

	sudo apt-get -y install nginx || (echo "Nginx installation Failed" && exit)

	#Start nginx
	sudo /etc/init.d/nginx start
	sudo /etc/init.d/nginx status

	#start nginx in all runlevels
	sudo update-rc.d nginx defaults
	return 0
}

function install_php5-fpm
{
	#echo "This function will install php"
	#Install php5-fpm
	sudo apt-get update || (echo "Update Failed" && exit)
	sudo apt-get -y install php5-fpm || (echo "php5-fpm Installation failed" && exit)

	#configure php
	#uncomment line in php.ini to make it work
        if [ -s /etc/php5/fpm/php.ini ];then
		sudo sed -i "/=msql.so/ s/;/ /" /etc/php5/fpm/php.ini
	fi

	#sudo sed -i "/cgi.fix_pathinfo=/ s/1/0/" /etc/php5/fpm/php.ini
	#sudo sed -i "/listen = / s/127\.0\.0\.1\:9000/\/var\/run\/php5-fpm\.sock/" /etc/php5/fpm/pool.d/www.conf
	
	sudo sed -i "/listen = / s/\/var\/run\/php5-fpm\.sock/127\.0\.0\.1\:9000/" /etc/php5/fpm/pool.d/www.conf

	#restart php
	sudo service php5-fpm restart || (echo "PHP restart Failed" && exit)
	return 0
}

function install_mysql
{
	#echo "This function will install mysql"
	#sudo apt-get update || ( echo "Update Failed" && exit )
	
	#added Generate random password for mysql root user
	#This method will prompt the generated password....
	msql_passwd=$(date +"%s" | md5sum | cut -c -10)
        
	echo
	echo
	echo "MySQL password is $msql_passwd"
	echo
	echo

	#Set MySQL password in advance
	echo "mysql-server mysql-server/root_password password $msql_passwd" | sudo debconf-set-selections
	echo "mysql-server mysql-server/root_password_again password $msql_passwd" | sudo debconf-set-selections
	
	#Install MySQL
	sudo apt-get -y install mysql-server php5-mysql || (echo "MySQL installation Failed" && exit)
	
	#configure MySQL
	sudo mysql_install_db

	#user should change his root password during this phase
	sudo /usr/bin/mysql_secure_installation

	return 0
}

function is_installed 
{
	pkg_name=$1
	hash $pkg_name &> /dev/null
	if [ $? -eq 1 ];
	then
		echo "$pkg_name is not installed"
		echo "##"
		echo "# $pkg_name will be installed."
		echo "##"
		install_$pkg_name
		if [ $? -ne 0 ];then
			echo "Failed to install $pkg_name "
			exit 1
		fi
	else
		echo "$pkg_name is already installed"
		echo 
		echo 
	fi
	return 0
}

function ask_domain_add_hosts
{
	valid=1
        echo 
        while [ "$valid" -eq "1" ];do
                echo 
                echo "Please provide domain name like example.com, example.ac.in, example.in....."
                read dom

                if [ "$dom" == "" ];then
                        echo "Empty not allowed..."
                        continue;
                fi

                if [ -d $nginx_home/$dom ] || [ -s $site_config/$dom ];then
                        echo "$dom already exists..."
                        continue;
                fi
                break;
                #valid=0
        done
        echo "Final domain name is $dom"

	#Not working permission denied...issue
	#sudo echo "127.0.0.1 $dom" >> /etc/hosts

	sudo sh -c "echo 127.0.0.1 $dom >> /etc/hosts"

	return 0
}

function set_nginx_config
{
	echo "Setting up nginx......."
	nginx_home=$1
	site_config=$2

	#Create root document and logs for your website
	sudo mkdir -p $nginx_home/$dom/htdocs/ $nginx_home/$dom/logs/

	#Create nginx server block for your domain
	#Here separate file is used for defining nginx server block (e.g sample_nginx_config file)
	
	if [ -s sample_nginx_config ];then
		sudo cp sample_nginx_config $site_config/$dom
	else
		echo -e "Failed to copy default nginx file\nFile does not exist"
		exit 1
	fi

	#Make changes in nginx server block defined in /etc/nginx/sites-available/example.com
	sudo sed -i "s/example\.com/$dom/g" $site_config/$dom
	#Make symlink for sites-enabled
	sudo ln -s $site_config/$dom /etc/nginx/sites-enabled/
	sudo nginx -t
	
	#Make symlink for log files
	#Now log is visble in two locations 1)/var/log/nginx/$dom.access.log   2)/usr/share/nginx/www/$dom/access.log
	sudo ln -s /var/log/nginx/$dom.access.log $nginx_home/$dom/logs/access.log
	sudo ln -s /var/log/nginx/$dom.error.log $nginx_home/$dom/logs/error.log

	#restart nginx
        sudo service nginx restart
	return 0
}

#function download_wordpress
#{
#	home=$1
#	
#	echo "Downloading Wordpress........."
#	#download wordpress 
#	#tar has better option of no-stripping
#	sudo wget -P $home/$dom/htdocs/ http://wordpress.org/latest.zip || (echo "Failed to download Wordpress..." && exit)
#	
#	#added - on server if unzip is not installed then script will install unzip...
#	hash unzip &> /dev/null
#        if [ $? -ne 0 ];then
#		echo "The program unzip is currently not installed."
#	        sudo apt-get install unzip || (echo "Failed to install unzip" && exit)
#	fi
#	sudo unzip $home/$dom/htdocs/latest.zip -d $home/$dom/htdocs/ || (echo "Unzipping opertaion failed..." && exit)
#	
#	#Doing similar to --strip-components=1 used in tar....Removing wordpress directory
#	sudo mv $home/$dom/htdocs/wordpress/* $home/$dom/htdocs/ || (echo "Failed to move...no such file or directory" && exit)
#	sudo rm -rf $home/$dom/htdocs/wordpress/
#	sudo rm $home/$dom/htdocs/latest.zip
#	return 0
#}

function download_wordpress
{
      	#For the first site on linux machine, script will download wordpress 
      	#For second site, script will copy wordpress from cache to site's home directory
      	home=$1
      	sudo mkdir -p /var/cache/easy_wp
	cache=/var/cache/easy_wp  
        
        if [ ! -f $cache/latest.zip ];then
                echo "Not found in cache..."
                echo "Downloading wordpress"
                sudo wget -P $cache http://wordpress.org/latest.zip || (echo "Failed to download Wordpress..." && exit)

                hash unzip &> /dev/null
                if [ $? -ne 0 ];then
                        echo "The program unzip is currently not installed."
                        sudo apt-get install unzip || echo "Failed to install unzip" && exit
                fi
                sudo unzip $cache/latest.zip -d $cache || (echo "Unzipping opertaion failed..." && exit)
        fi

        #once $cache has latest.zip and wordpress dir ....then proceed for copying it to...$nginx_home
        echo "Copying wordpress from cache..."
        sudo cp -r $cache/wordpress/* $nginx_home || (echo "Failed to copy " && exit)
	return 0
}

function create_db_wordpress
{
	quote="\`"
	last="_db"
	
	wp_db=""
	wp_db+=$quote
	wp_db+=$dom
	wp_db+=$last
	wp_db+=$quote
	
	echo "DB $wp_db will be created"
	

	#Script will prompt for mysql password
	mysql -u root -p -e "create database $wp_db;"
	if [ $? -ne 0 ];then
		echo "Failed to create Wordpress database"
		exit
	fi
	return 0
}

function configure_wordpress
{
	nginx_home=$1
	wp_home=$2
	#wp_user=$3
	
	#added - New wordpress user for given domain name.
	usrname=$(echo $dom | cut -d"." -f1)
	echo "simple name is $usrname"
	wp_user+=$usrname
	wp_user+="user"
	echo "New MySQL database username $wp_user"
	

	#added- Generates random password of 10 characters for wordpress DB user
	wp_passwd=$(date +"%s" | md5sum | cut -c -10)
	echo "wordpress user $wp_user and password is $wp_passwd"
	echo
	echo "You are just few steps away from your Wordpress Site...."
	echo "Configuring Wordpress......"

	#Change in MYSQL DB
	#Create new wordpress user with password and give him privilege to access $dom_db database
	q1="GRANT USAGE ON *.* TO $wp_user@localhost IDENTIFIED BY '$wp_passwd';"
	q2="GRANT ALL PRIVILEGES ON $wp_db.* TO $wp_user@localhost;"
	q3="FLUSH PRIVILEGES;"
	SQL="${q1}${q2}${q3}"


	#script will prompt for mysql password
	mysql -u root -p -e "$SQL"
	if [ $? -ne 0 ];then
		echo "Changes failed in MYSQL DB"
	fi

	#Do changes in wp-config.php
	if [ -s "$nginx_home/$dom/htdocs/wp-config-sample.php" ];then
	        sudo cp "$nginx_home/$dom/htdocs/wp-config-sample.php" "$nginx_home/$dom/htdocs/wp-config.php"

		#Make changes in wp-config.php
		#Change DBname,WordpressUser,Password
		sudo sed -i "/DB_NAME/ s/database_name_here/$dom$last/" $nginx_home/$dom/htdocs/wp-config.php
		sudo sed -i "/DB_USER/ s/username_here/$wp_user/" $nginx_home/$dom/htdocs/wp-config.php
		sudo sed -i "/DB_PASSWORD/ s/password_here/$wp_passwd/" $nginx_home/$dom/htdocs/wp-config.php
	else
		echo "wp-config-sample.php file does not exist"
		exit
	fi
	
	#set permissions
	sudo chown -R www-data:www-data $nginx_home/$dom

	sudo /etc/init.d/php5-fpm restart
	sudo /etc/init.d/nginx restart
	
	#Openup example.com in browser
	echo "***************"
	echo "***Congo!! Your wordpress is successfully installed..."
	echo "***Open $dom in your browser"
	echo "***************"
	return 0
}

function check_root
{
	sudo -v 2>/dev/null
	if [ $? -ne 0 ];then
        	echo "sorry you do not have sudo privilege...This script reuires sudo privilege."
        	exit
	fi 
}

#Read from here

packages="php5-fpm mysql nginx"
nginx_home="/usr/share/nginx/www"
site_config="/etc/nginx/sites-available"
#mysql root username password db_name
#uname=root
#passwd=sumit
#db_name=$dom_db
wordpress_loc="$nginx_home/$dom/htdocs/wordpress"

#0) Check for sudo user
check_root


#1) Check necessary packages and install them
for pkg_name in $packages; do
	is_installed $pkg_name
done
if [ $? -ne 0 ];then
        echo "Failed in Package Installation mode..."
        exit 1
fi
echo

#2) Ask user for domain name
ask_domain_add_hosts

#3) Set nginx config
set_nginx_config $nginx_home $site_config
if [ $? -ne 0 ];then
        echo "Failed in nginx configuration"
	exit 1
fi
echo 

#4) Download wordpress
download_wordpress $nginx_home $site_config
if [ $? -ne 0 ];then
       echo "Failed to download Wordpress"
        exit 1
fi

#5)Create Wordpress Database
create_db_wordpress
if [ $? -ne 0 ];then
        echo "Failed to create Wordpress DB"
        exit 1
fi

#6) Setup wordpress
configure_wordpress $nginx_home $wordpress_loc $wordpress_user $wordpress_password $dom
if [ $? -ne 0 ];then
	echo "Failed to configure Wordpress"
	exit 1
fi

